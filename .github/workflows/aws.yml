# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# For more configuration, check the action out here:
# https://github.com/aws-actions/amazon-ecs-deploy-task-definition
# From there, you can add an appspec.yaml and other stuff AWS GH Action offers.
#
# Image tags use latest instead of commit sha since we have a repository
# with all commits anyways. We deploy on every master push.
# With that justification, we will simply replace the tags.

# FIXME For now, let's just deploy on master since I don't wanna wait for Travis.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master
    paths:
      # Trigger this workflow on master push
      - '**'
      # Except when ONLY these dirs are changed
      # ---------------------------------------
      # Docs
      - '!docs/**'
      - '!README.rst'
      # TODO Add my implementation of non-Docker Travis
      - '!production.yml'

      # Only ECR build workflows trigger this workflow.
      - '!.github/workflows/**'
      - '.github/workflows/aws.yml'
      - '.github/workflows/nginx.yml'

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # TODO Change your AWS region here!
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Fill task definition with nginx
    # -------------------------------------------------------
    # The image ID is latest since we don't know if nginx was actually built
    # but we fill this in anyways since Django image takes awhile to build.
    - name: Fill in the nginx image ID in the Amazon ECS task definition
      id: fill-nginx-image
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nginx-reverse-proxy
        IMAGE_TAG: latest
      with:
        task-definition: aws-task-definition.json
        container-name: nginx
        image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # Build Django app
    # -------------------------------------------------------
    - name: Build, tag, and push Django image to Amazon ECR
      id: build-django-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: django-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new Django image ID in Amazon ECS task definition
      id: fill-django-image
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.fill-nginx-image.outputs.task-definition }}
        container-name: django-app
        image: ${{ steps.build-django-image.outputs.image }}

    # Deploy
    # -------------------------------------------------------
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.fill-django-image.outputs.task-definition }}
        # TODO Change the service and cluster name if you changed it
        service: cookiecutter-django-service
        cluster: cookiecutter-django
        wait-for-service-stability: true
